import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { registerUser } from './userAPI';

export interface UserState {
  id?: string
}

const initialState: UserState = {
  id: undefined
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const registerAsync = createAsyncThunk(
  'register/registerUser',
  async (uuid: string) => {
    const response = await registerUser(uuid);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const userSlice = createSlice({
  name: 'register',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    register: (state, action: PayloadAction<UserState>) => {
      debugger;
      state.id = action.payload.id;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(registerAsync.pending, (state) => {
        // state.status = 'waiting';
      })
      .addCase(registerAsync.fulfilled, (state, action) => {
        // state.status = 'success';
        state.id = action.payload
      });
  },
});
export const selectUserId = (state: RootState) => state.user.id;

export const { register } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.notifications.value)`
// export const selectNotifications = (state: RootState) => state.notifications.notifications;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default userSlice.reducer;
